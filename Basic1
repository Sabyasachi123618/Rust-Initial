use std::io;
fn main()
{
   //let understand ownership
   let s = String::from("hello World");
   another_function(s);
   println!("{}",s);//Going to get an error since the ownership is taken
}
fn another_function(abc:String)
{
    println!("{}",abc);
}

--------------------------------------------------------------------------
use std::io;
fn main()
{
    let s1 = gives_ownership();
    println!("{}",s1);
    let s2 = String::from("hello");
    let s3 = takes_and_gives_ownership(s2);
    println!("{}",s3);
    println!("{}",s2);//expect an error since ownership has already taken
}
fn another_function(abc:String)
{
    println!("{}",abc);
}
fn gives_ownership() -> String {
    let some_var = String::from("Please take ownership");
    some_var
}
fn takes_and_gives_ownership(abc:String) -> String{
    abc
}
---------------------------------------------------------------
fn main()
{
    let abc = String::from("Hello World");
    let(s1,length) = length_and_string(abc);
    println!("{} is havign a length of {}",s1,length);
}
fn length_and_string(abc:String)-> (String,usize){
    let length:usize = abc.len();
    (abc,length)
}
-----------------------------------------------------------------
//Referance and borrowing in rust
fn main()
{
    let s1 = String::from("hello");
    dummy(&s1);
    println!("{}",s1);
    
}
fn dummy(s:&String)
{
    println!("This is in scope of dummy");
}
-----------------------------------------------------------------
//Referance and borrowing in rust
fn main()
{
    let s1 = String::from("hello");
    dummy(&s1);
    println!("{}",s1);
}
fn dummy(s:&String)
{
    s.push_str(" Rust");//.we can expect a error since by default referance are immutable
    println!("This is in scope of dummy");
}
-------------------------------------------------------------------
//Referance and borrowing in rust
fn main()
{
    let mut s1 = String::from("hello");
    dummy(&mut s1);
    println!("{}",s1);
}
fn dummy(s:&mut String)
{
    s.push_str(" Rust");//now we have explicitly made the referance as mutable
    println!("This is in scope of dummy");
}
-----------------------------------------------------------------------
Some Brutal Concepts
fn main()
{
    let mut s1 = String::from("hello");
    let s4 = &mut s1;
    s4.push_str("dqbf");
    println!("{}",s4);
    let s2 = & s1;
    let s3 = & s1;
}
-----------------------------------------------------------------------


